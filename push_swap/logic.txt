push_swap 과제는 다음의 큰 분류로 나뉩니다.

1. 입력값 처리.
	a. 문자열로 들어오는 것을 모두 분리하고 숫자로 바꾸고 자료구조에 넣는 기능을 만들어야합니다.
2. 자료구조 구상 및 구현
	a. 다양한 방식이 있습니다. 대표적으로  배열, 연결리스트가 있습니다.
	저는 이 과제에서 자료구조에 대한 제대로 된 학습을 권장하는 편입니다.
	어떤 자료구조를 내가 만들겠다고 하면 push_swap구현 코드와 완전히 독립되고
	헤더파일로 분할하여 가져다 쓸 수 있는 자료구조를 직접 구현하시길 추천 드립니다.
	libft에 넣어보는건 어떨까요!
3. 2에서 구현한 자료구조를 이용하여 11가지 operator 구현
4. push_swap 알고리즘 구상 및 구현

알고리즘

1. 전처리  인덱싱
만약에 인풋이
1 88 2 33 99
가 들어온다면 실 자료구조에서는 숫자가
0 3 1 2 4 가 되도록 인덱싱을 합니다.
// 요 인덱싱 과정이 어디서 필요할까? -> 나 인 것 같다.
push_swap은 실제로 값을 알필요가 없습니다.
값간의 대소비교만 명확하면 내부에서 어떤 수를 사용해도 상관이없습니다

2. swap
큰틀에서 swap 방식은 다음과 같습니다.
가 : 스택 a에 있는 모든 값을 규칙대로 다 b로 넘깁니다.
나 : 스택 b에 있는 모든 값을 규칙대로 다 a로 넘깁니다.
이때 가장 큰 값을 스택 top으로 올려서 큰 값부터 넘깁니다.
그러면 자연스레 정렬이 되면서 넘어갑니다.
다 : 정렬 끝.


가. 세부 규칙
num의 값을 0이라 하고 chunk 라는 상수가 15 (전체 size 가 500개일 때는 30)로 임의로 정합니다.
당연하겠지만 chunk 값은 size에 비례해 효율의 값이 다르지만 이 식을 구체적으로 알아내지 못했습니다.
이 공식을 찾아 알아보는 것은 어떨까요? top의 값을 다음의 세 구간으로 구분하여 처리합니다.

1.	top ≤ num
	b로 넘깁니다.
	pb 1회   num++
2.	num < top ≤ num + chunk
	b로 넘기고 넘긴값을 바닥으로 돌립니다
	pb 1회
	rb를 1회
	num++
3.  num + chunk< top
	a의 맨 밑으로 넣습니다
	ra 1회.


나. 세부 규칙

1. a로 넘깁니다.
2. b의 가장 큰 값을 가장 효율적으로 top으로 옮깁니다.
3. b의 모든 값이 a로 넘길때까지 1,2를 반복합니다
	특정 값을 가장 효율적으로 top 으로 옮기는 방법.
	1. 전체스택을 절반으로 나누고 원하는 값이
	2. 상단에 존재하면 top이 될때까지 r(a/b)
	3. 하단에 존재하면 top이 될때까지 rr(a/b) 를 합니다.

여기서 구현만 하고 넘어갈 것인가요?
그래도 push_swap과제에서는 알고리즘을 공부하길 원합니다.
주위에서는 대표적으로 push_swap을 풀기위해 다음의 알고리즘들이 사용되었으니 한번 공부해보는건 어떨까요
1. quick sort
2. merge sort
3. greedy
4. radix sort
5. dp


https://80000coding.oopy.io/8bf0d7c1-9fdb-4114-b4e6-59d823b76286


`sa` : `swap a` - 스택 `a`의 가장 위에 있는 두 원소(혹은 첫 번쨰 원소와 두 번째 원소)의
위치를 서로 바꾼다.
`sb` : `swap b` - 스택 `b`의 가장 위에 있는 두 원소(혹은 첫 번쨰 원소와 두 번째 원소)의
위치를 서로 바꾼다.
`ss` : `sa`와 `sb`를 동시에 실행한다.

`pa` : `push a` - 스택 `b`에서 가장 위(탑)에 있는 원소를 가져와서,
스택 `a`의 맨 위(탑)에 넣는다. 스택 `b`가 비어 있으면 아무 것도 하지 않는다.
`pb` : `push b` - 스택 `a`에서 가장 위(탑)에 있는 원소를 가져와서,
스택 `b`의 맨 위(탑)에 넣는다. 스택 `a`가 비어있으면 아무 것도 하지 않는다.

`ra` : `rotate a` - 스택 `a`의 모든 원소들을 위로 1 인덱스 만큼 올린다.
첫 번째 원소(탑)는 마지막 원소(바텀)가 된다.
`rb` : `rotate b` - 스택 `b`의 모든 원소들을 위로 1 인덱스 만큼 올린다.
첫 번째 원소(탑)는 마지막 원소(바텀)가 된다.
`rr` : `ra`와 `rb`를 동시에 실행한다.

`rra` : `reverse rotate a` - 스택 `a`의 모든 원소들을 아래로 1 인덱스 만큼 내린다.
마지막 원소(바텀)는 첫 번째 원소(탑)가 된다.
`rrb` : `reverse rotate b` - 스택 `b`의 모든 원소들을 아래로 1 인덱스 만큼 내린다.
마지막 원소(바텀)는 첫 번째 원소(탑)가 된다.
`rrr` : `rra`와 `rrb`를 동시에 실행한다.