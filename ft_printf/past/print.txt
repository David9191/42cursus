매개변수
가변인자 : 매개변수의 값이 고정되어있지 않은 것. 즉, 함수 호출 때마다 인자의 수가 다른 매개변수.
가변인자 함수는 고정 매개변수가 하나 이상 있어야 됨.

...으로 들어온 가변 인자를 사용하려면 stdarg.h
헤더 파일의 매크로를 사용

va_list : 가변 인자 목록.
가변 인자의 메모리 주소를 저장하는 포인터

void va_start(va_list ap, last);
va_start : 가변 인자를 가져올 수 있도록
포인터를 설정

type va_arg(va_list ap, type);
va_arg : 가변 인자 포인터에서
특정 자료형 크기만큼 값을 가져옴

void va_copy(va_list dest, va_list src);

void va_end(va_list ap);
va_end : 가변 인자 처리가 끝났을 때
포인터를 NULL로 초기화

cspdiuxX%
man 3 printf / man 3 stdarg
int ft_printf(const char *format, ...);

c 문자 출력
d, i랑 똑같이 구현하기
p, x, X 비슷하게 구현하기
% 그냥 %출력
u 언싸인드 인트로 출력
s 문자열 출력

c : The int argument is converted to an unsigned char,
	and the resulting character is written.
s : The char * argument is expected to be a pointer to an array of character type
	(pointer to a string).  Characters from the array are written up to (but not includ-
	ing) a terminating NUL character; if a precision is specified, no more than the num-
	ber specified are written.  If a precision is given, no null character need be
	present; if the precision is not specified, or is greater than the size of the array,
	the array must contain a terminating NUL character.
p : The void * pointer argument is printed in hexadecimal (as if by `%#x' or `%#lx').
d : a decimal integer (assumes base 10)
i : a decimal integer
u : int to unsigend int
x : Hexadecimal representation lowercase
X : Hexadecimal representation uppercase
% : A `%' is written.  No argument is converted.  The complete conversion specification
	is `%%'.


difference between d and i

https://www.geeksforgeeks.org/difference-d-format-specifier-c-language/
%d and %i behavior is different in scanf
%d assume base 10 while %i auto detects the base. Therefore,
both specifiers behaves differently while they are used with an input specifier.
So, 012 would be 10 with %i but 12 with %d.

https://www.tutorialspoint.com/difference-between-d-and-i-format-specifier-in-c-language
there is no difference in printf() function output while printing a number using %d or %i
but using scanf the difference occurs.
scanf() function detects base using %i but assumes base 10 using %d.

%c Prints a single character.
%s Prints a string (as defined by the common C convention).
%p The void * pointer argument has to be printed in hexadecimal format.
%d Prints a decimal (base 10) number.
%i Prints an integer in base 10.
%u Prints an unsigned decimal (base 10) number.
%x Prints a number in hexadecimal (base 16) lowercase format.
%X Prints a number in hexadecimal (base 16) uppercase format.
%% Prints a percent sign.

printf에서 %d나 %i의 경우에 2147483648을 넘겨주면 에러나고
제 ft_printf에서 2147483648을 주면 va_arg(ap, int)에서 -2147483648을 리턴해주던데
어디서 얘를 잡아줘야 될까요...??ㅠㅠ
